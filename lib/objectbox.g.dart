// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'dataBase/data_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6957062273107783833),
      name: 'MqttBrokerData',
      lastPropertyId: const IdUid(16, 1862868516227419248),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7709794822573441842),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2583300188299802886),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6538968308219444358),
            name: 'iconPath',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7819383445043383346),
            name: 'clientId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6113937746553945604),
            name: 'host',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2763089878887892111),
            name: 'hostType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7083622977173645919),
            name: 'port',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2654848864915159848),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1620239181081807170),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2006892253586629759),
            name: 'mqttVersion',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6529546360971547301),
            name: 'keepAlive',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3577514373035889779),
            name: 'autoReconnect',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3504464729807485269),
            name: 'secure',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7976323242031362347),
            name: 'websocket',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3813906004235087896),
            name: 'topic',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1862868516227419248),
            name: 'topicVersion',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 6957062273107783833),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    MqttBrokerData: EntityDefinition<MqttBrokerData>(
        model: _entities[0],
        toOneRelations: (MqttBrokerData object) => [],
        toManyRelations: (MqttBrokerData object) => {},
        getId: (MqttBrokerData object) => object.id,
        setId: (MqttBrokerData object, int id) {
          object.id = id;
        },
        objectToFB: (MqttBrokerData object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final clientIdOffset = fbb.writeString(object.clientId);
          final hostOffset = fbb.writeString(object.host);
          final hostTypeOffset = fbb.writeString(object.hostType);
          final usernameOffset = fbb.writeString(object.username);
          final passwordOffset = fbb.writeString(object.password);
          final keepAliveOffset = fbb.writeString(object.keepAlive);
          final topicOffset = fbb.writeList(
              object.topic.map(fbb.writeString).toList(growable: false));
          final topicVersionOffset = fbb.writeList(
              object.topicVersion.map(fbb.writeString).toList(growable: false));
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.iconPath);
          fbb.addOffset(3, clientIdOffset);
          fbb.addOffset(4, hostOffset);
          fbb.addOffset(5, hostTypeOffset);
          fbb.addInt64(6, object.port);
          fbb.addOffset(7, usernameOffset);
          fbb.addOffset(8, passwordOffset);
          fbb.addInt64(9, object.mqttVersion);
          fbb.addOffset(10, keepAliveOffset);
          fbb.addBool(11, object.autoReconnect);
          fbb.addBool(12, object.secure);
          fbb.addBool(13, object.websocket);
          fbb.addOffset(14, topicOffset);
          fbb.addOffset(15, topicVersionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final iconPathParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final clientIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final hostParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final hostTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final portParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final mqttVersionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final keepAliveParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final secureParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final websocketParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false);
          final autoReconnectParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final topicParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 32, []);
          final topicVersionParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 34, []);
          final object = MqttBrokerData(
              id: idParam,
              name: nameParam,
              iconPath: iconPathParam,
              clientId: clientIdParam,
              host: hostParam,
              hostType: hostTypeParam,
              port: portParam,
              username: usernameParam,
              password: passwordParam,
              mqttVersion: mqttVersionParam,
              keepAlive: keepAliveParam,
              secure: secureParam,
              websocket: websocketParam,
              autoReconnect: autoReconnectParam,
              topic: topicParam,
              topicVersion: topicVersionParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [MqttBrokerData] entity fields to define ObjectBox queries.
class MqttBrokerData_ {
  /// see [MqttBrokerData.id]
  static final id =
      QueryIntegerProperty<MqttBrokerData>(_entities[0].properties[0]);

  /// see [MqttBrokerData.name]
  static final name =
      QueryStringProperty<MqttBrokerData>(_entities[0].properties[1]);

  /// see [MqttBrokerData.iconPath]
  static final iconPath =
      QueryIntegerProperty<MqttBrokerData>(_entities[0].properties[2]);

  /// see [MqttBrokerData.clientId]
  static final clientId =
      QueryStringProperty<MqttBrokerData>(_entities[0].properties[3]);

  /// see [MqttBrokerData.host]
  static final host =
      QueryStringProperty<MqttBrokerData>(_entities[0].properties[4]);

  /// see [MqttBrokerData.hostType]
  static final hostType =
      QueryStringProperty<MqttBrokerData>(_entities[0].properties[5]);

  /// see [MqttBrokerData.port]
  static final port =
      QueryIntegerProperty<MqttBrokerData>(_entities[0].properties[6]);

  /// see [MqttBrokerData.username]
  static final username =
      QueryStringProperty<MqttBrokerData>(_entities[0].properties[7]);

  /// see [MqttBrokerData.password]
  static final password =
      QueryStringProperty<MqttBrokerData>(_entities[0].properties[8]);

  /// see [MqttBrokerData.mqttVersion]
  static final mqttVersion =
      QueryIntegerProperty<MqttBrokerData>(_entities[0].properties[9]);

  /// see [MqttBrokerData.keepAlive]
  static final keepAlive =
      QueryStringProperty<MqttBrokerData>(_entities[0].properties[10]);

  /// see [MqttBrokerData.autoReconnect]
  static final autoReconnect =
      QueryBooleanProperty<MqttBrokerData>(_entities[0].properties[11]);

  /// see [MqttBrokerData.secure]
  static final secure =
      QueryBooleanProperty<MqttBrokerData>(_entities[0].properties[12]);

  /// see [MqttBrokerData.websocket]
  static final websocket =
      QueryBooleanProperty<MqttBrokerData>(_entities[0].properties[13]);

  /// see [MqttBrokerData.topic]
  static final topic =
      QueryStringVectorProperty<MqttBrokerData>(_entities[0].properties[14]);

  /// see [MqttBrokerData.topicVersion]
  static final topicVersion =
      QueryStringVectorProperty<MqttBrokerData>(_entities[0].properties[15]);
}
